Dynamic Web Project 구조

1. JAX-WS Web Services : 사용 안함
2. Java Resources(***********************)
   - 자바 파일을 저장하는 폴더(*.java)
   - src: 패키지 + 소스 파일
3. JavaScript Resources : 사용 안함
4. build : 사용 안함
5. src > main > webapp(***********************)
   - 브라우저를 통해서 요청하는 모든 리소스의 루트 폴더
   - *.html, *.css, *.js, 이미지, 동영상 등..
   - META-INF : 사용 안함
   - WEB-INF : 서버 설정과 관련된 파일을 저장(외부에서 접근이 불가능하다. 보안상의 이유로)
      a. lib : *.jar 저장 폴더(콘솔 프로젝트의 Build Path와 동일한 역할)
      b. web.xml : 서버를 운영하는데 관련한 설정을 저장하는 XML 파일
      

Hello.java
- Hello 자바 클래스를 사용해서 브라우저가 보게될 HTML 페이지를 동적(******)으로 만듦
- 서블릿이라는 기술을 사용했다. > 서블릿은 동적으로 웹페이지를 만드는 기술이다.

메일 사이트
- abc123 -> 받은 편지함(receive.html) -> 페이지 소스 -> abc123에게 도착한 메일 태그 구성
- abc123 -> 새 메일 도착 -> 밭은 편지함(abc_receive2.html)
- kim -> 받은 편지함(kim_receive.html) -> 페이지 소스 -> kim에게 도착한 
- 

Servlet, 서블릿
- (서버측) 기술, Server-side Programming
- 자바를 사용해서 동적으로 웹페이지를 만드는 기술
- 자바 진영에서 처음으로 시도한 웹 서버 기술
- Server + Applet 합성어

서버측 기술
1. CGI, Common Gateway Interface
	- 브라우저와 웹서버간의 정보(데이터)를 주고 받는 규약
	- CGI 구현 언어 > C언어
	- 서블릿이 자바를 사용해서 CGI를 구현해놓은 기술 중 하나
	
2. PHP, Personal HyperText Preprocessor
	- C 기반 스크립트 언어
	- 개인 사이트 제작용 > 기업용 많이 사용
	
3. ASP
	- PHP 유사
	- MS 스크립트 언어(VBScript)
	
4. ASP.NET
	- ASP의 버전업
	- C# 사용(VB.NET)
	- 현역
	
5. JSP, Java Server Page
	- MS ASP의 자바 버전
	- Java 사용
	
6. Ruby on Rails
	- 일본
	
7. Node.js
	- ***
	- 웹 서버 제작용 자바스크립트
	
8. Python
	- 파이썬(빅테이터, AI)
	- Django(웹 프레임워크)
	
	- 자바 Servlet + JSP > 버전업
	- 자바 기반의 웹 프레임워크


Servlet Class, 서블릿 클래스 (= 알바생)
- Hello.java
- 순수 자바 클래스를 기반으로 웹 어플리케이션(웹 사이트, 웹 페이지)를 제작하는 기능을 추가한 클래스

Servlet Class 작성 규칙
- 해당 규칙을 준수하여 클래스를 작성해야만 서블릿 클래스의 역할을 할 수 있고, WAS에 의해서 관리/운영될 수 있다.
1. 서블릿 클래스 선언
	(둘 중 하나만 사용하면 된다)
	a. javax.servlet.Servlet 인터페이스를 구현한다. (복잡함 -> 잘 사용 안함)
	a. javax.servlet.http.HttpServlet 클래스를 상속한다. (간편함)
	
2. doGet/doPost 메소드 선언
	- 둘 중 하나 or 둘 다 선언 필요
	- 단, 둘 중 하나라도 없으면 서블릿이 아니다.(알바생x)
	- 클라이언트(브라우저)의 요청이 들어오면, 서버측에서 자동으로 이 메소드가 실행된다.(일종의 이벤트 메소트 or 콜백 메소드)
	- 동적으로 HTML페이지를 생성하는 역할의 메소드(***)
	- 메소드 작성 규칙
		a. 매개변수 작성(2개)
			1. javax.servlet.http.HttpServletRequest
			2. javax.servlet.http.HttpServletResponse
		b. 예외 미루기(2개)
			1. java.io.IOException: 페이지를 동적으로 만드는 작업(입출력 발생)
			2. javax.servlet.ServletException: 서블릿과 관련 예외 처리

3. 동적 HTML 문서 작성 구현
	a. HttpServletResponse 객체의 getWriter() 메소드 호출 > PrintWriter 객체 반환
	b. PrintWrite 객채의 printXXx(), write() 등의 메소드를 보유
		> 이 메소드를 사용해서 브라우저에게 돌려줄 HTML 페이지 소스를 작성
	c. PrintWriter의 작성 내용이 브라우저에게 돌려줄 페이지 소스가 된다.
	
4. 가장 주소 매핑
	- http://localhost:8090/ServletTest/servlet/com.test.servlet.Hello
	- 자바파일(*.java)은 웹에서 사용하는 용도의 파일이 아니다.
	- 브라우저를 통해서 자바 파일을 실행 할 수 없다. (***)
	- 브라우저가 자바 파일을 직접 호출할 수 있도록 가상 주소를 만들어서 서로 연결해야 한다. (***)
	- 톰캣(웹서버)에게 설정한다. > web.xml(Deployment 
	
	
	
	
	
	
	
	
	
	
	
페이지 2장
- A페이지, B페이지
- A페이지 -> 사용자 키보드 입력 -> (전송) -> B페이지 ->  데이터 수신 + 가공 + 화면 출력
- 데이터 주고 받기
- 데이터 입력받아 전송하는 알바생: Ex03_Send.java 서블릿 > "/ex03_send.do"
- 데이터를 수신해서 처리하는 알바생: Ex03_Receive.java 서블릿 > "/ex03_receive.do"




서버 수업
1. Servlet
	- 오늘 수업, 1세대 기술
	- 클라이언트 작성 환경 불편
	- 여러 문제점
	
2. JSP
	- 2세대 기술
	- Servlet 계승 + Servlet 문제점 개선
	- 여러 문제점 
	
3. Servlet + JSP
	- 1세대 기술 + 2세대 기술
	- 서로 단점을 보완해서 안정성을 높힘
	- 전성기
	- 이 파트를 중심으로 수업
	
4. Spring
	
4. Spring